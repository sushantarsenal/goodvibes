// Table.js

import React, {useState} from "react";
import { useTable, useFilters, useSortBy, usePagination } from "react-table";
import styled from 'styled-components'


export default function Table({ columns, data, search }) {
	const [filterInput, setFilterInput] = useState("");
	// Use the useTable Hook to send the columns and data to build the table
	const {
		getTableProps, // table props from react-table
		getTableBodyProps, // table body props from react-table
		headerGroups, // headerGroups if your table have groupings
		rows, // rows for the table based on the data passed
		prepareRow, // Prepare the row (this function need to called for each row before getting the row props)
		setFilter
	} = useTable({
		columns,
		data
	},
		useFilters,
		useSortBy);

	const handleFilterChange = e => {
		const value = e.target.value || undefined;
		setFilter(search || "full_name", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value
		debugger
		setFilterInput(value);
	};

	const Styles = styled.div`
		padding: 0px !important;
		table {
			border-spacing: 0;
			width: 100%;
			margin-top: 20px !important;
			border-spacing: 0;
			padding: 0px !important;
			tr {
				:first-child{
					border: 1px solid red;
					display: none;
				}
				:last-child {
					td {
						border-bottom: 0;
					}
				}
			}
			th{
				background: #F5F6FA
				text-align: left
				padding: 20px 10px;
				color: #A3A6B4;
			},
			td {
				margin: 0;
				padding: 20px 10px;
				border-bottom: 1px solid #dedede;
				:last-child {
					border-right: 0;
				}
			}
		},
		input{
			width: 100%;
			padding: 15px 10px;
		}
	`,
	Container=styled.div`
		width: 100%;
	`

	// Input element

  /*
    Render the UI for your table
    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically
  */
	return (
		<>
			<input
				value={filterInput}
				onChange={handleFilterChange}
				placeholder={"Search.."}
				style={{width: '100%', padding: '15px 10px'}}
			/>
			<Styles>
				<table {...getTableProps()}>
					<thead>
						{headerGroups.map(headerGroup => (
							<tr {...headerGroup.getHeaderGroupProps()}>
								{headerGroup.headers.map(column => (
									<th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render("Header")}</th>
								))}
							</tr>
						))}
					</thead>
					<tbody {...getTableBodyProps()}>
						{rows.map((row, i) => {
							prepareRow(row);
							return (
								<tr {...row.getRowProps()}>
									{row.cells.map(cell => {
										return <td {...cell.getCellProps()}>{cell.render("Cell")}</td>;
									})}
								</tr>
							);
						})}
					</tbody>
				</table>
			</Styles>
		</>
	);



}
